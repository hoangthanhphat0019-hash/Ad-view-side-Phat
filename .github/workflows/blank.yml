Project Structure

ptc-app/
  backend/
    package.json
    server.js
    config.js
    routes/
      auth.js
      ads.js
    models/
      userModel.js
      adModel.js
    middleware/
      authMiddleware.js
    db/
      init.sql
  frontend/
    package.json
    src/
      App.js
      index.js
      components/
        Login.js
        Register.js
        Dashboard.js
        ViewAds.js
  docker-compose.yml
  backend.Dockerfile
  frontend.Dockerfile


---

backend/package.json

{
  "name": "ptc-backend",
  "version": "1.0.0",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "bcrypt": "^5.1.0",
    "cors": "^2.8.5",
    "dotenv": "^16.0.3",
    "express": "^4.18.2",
    "jsonwebtoken": "^9.0.2",
    "pg": "^8.10.0"
  }
}


---

backend/server.js

import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { Pool } from 'pg';
import authRoutes from './routes/auth.js';
import adsRoutes from './routes/ads.js';

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

export const db = new Pool({
  connectionString: process.env.DATABASE_URL
});

app.use('/api/auth', authRoutes);
app.use('/api/ads', adsRoutes);

app.listen(5000, () => console.log('Backend running on port 5000'));


---

backend/routes/auth.js

import express from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { db } from '../server.js';
import authMiddleware from '../middleware/authMiddleware.js';

const router = express.Router();

router.post('/register', async (req, res) => {
  const { username, password } = req.body;
  const hash = await bcrypt.hash(password, 10);
  await db.query('INSERT INTO users (username, password) VALUES ($1, $2)', [username, hash]);
  res.json({ message: 'User registered' });
});

router.post('/login', async (req, res) => {
  const { username, password } = req.body;
  const result = await db.query('SELECT * FROM users WHERE username=$1', [username]);
  if (result.rows.length === 0) return res.status(400).json({ message: 'Invalid user' });
  const user = result.rows[0];
  const match = await bcrypt.compare(password, user.password);
  if (!match) return res.status(400).json({ message: 'Wrong password' });
  const token = jwt.sign({ id: user.id }, process.env.JWT_SECRET);
  res.json({ token });
});

router.get('/me', authMiddleware, async (req, res) => {
  const result = await db.query('SELECT id, username, balance FROM users WHERE id=$1', [req.user.id]);
  res.json(result.rows[0]);
});

export default router;


---

backend/routes/ads.js

import express from 'express';
import { db } from '../server.js';
import authMiddleware from '../middleware/authMiddleware.js';

const router = express.Router();

router.get('/', authMiddleware, async (req, res) => {
  const result = await db.query('SELECT * FROM ads');
  res.json(result.rows);
});

router.post('/view/:id', authMiddleware, async (req, res) => {
  const adId = req.params.id;
  await db.query('UPDATE users SET balance = balance + 0.1 WHERE id=$1', [req.user.id]);
  res.json({ message: 'Ad viewed, balance updated' });
});

export default router;


---

backend/middleware/authMiddleware.js

import jwt from 'jsonwebtoken';

export default function authMiddleware(req, res, next) {
  const authHeader = req.headers.authorization;
  if (!authHeader) return res.sendStatus(401);
  const token = authHeader.split(' ')[1];
  jwt.verify(token, process.env.JWT_SECRET, (err, user) => {
    if (err) return res.sendStatus(403);
    req.user = user;
    next();
  });
}


---

backend/db/init.sql

CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  username TEXT UNIQUE NOT NULL,
  password TEXT NOT NULL,
  balance NUMERIC DEFAULT 0
);

CREATE TABLE IF NOT EXISTS ads (
  id SERIAL PRIMARY KEY,
  title TEXT NOT NULL,
  url TEXT NOT NULL
);


---

docker-compose.yml

version: '3'
services:
  db:
    image: postgres:15
    environment:
      POSTGRES_PASSWORD: example
    volumes:
      - ./backend/db/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"

  backend:
    build:
      context: ./backend
      dockerfile: ../backend.Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:example@db:5432/postgres
      JWT_SECRET: secret
    ports:
      - "5000:5000"
    depends_on:
      - db

  frontend:
    build:
      context: ./frontend
      dockerfile: ../frontend.Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - backend


---

backend.Dockerfile

FROM node:18
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 5000
CMD ["npm", "start"]


---

frontend.Dockerfile

FROM node:18
WORKDIR /app
COPY package*.json ./
RUN npm install
COPY . .
EXPOSE 3000
CMD ["npm", "start"]


---

(Phần frontend React sẽ tiếp tục ở lần gửi sau để đủ full-stack).

